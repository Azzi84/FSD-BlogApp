"use client";

import { useState, useEffect, useCallback } from "react";
import { Post } from "@repo/db/data";
import Link from "next/link";
import { posts } from "@repo/db/data";

export function AdminListScreen() {
  // Initialize with all posts (both active and inactive)
  const [allPosts, setAllPosts] = useState<Post[]>([...posts]);
  const [filteredPosts, setFilteredPosts] = useState<Post[]>([...posts]);
  
  // Filter state
  const [contentFilter, setContentFilter] = useState("");
  const [tagFilter, setTagFilter] = useState("");
  const [dateFilter, setDateFilter] = useState("");
  const [visibilityFilter, setVisibilityFilter] = useState("all");
  const [sortBy, setSortBy] = useState("date-desc");
  
  const [statusMessage, setStatusMessage] = useState<{ id: number, message: string } | null>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [refreshMessage, setRefreshMessage] = useState("");
  
  // Function to apply all filters
  const applyFilters = useCallback(
    (
      content: string, 
      tag: string, 
      date: string, 
      visibility: string, 
      sort: string,
      sourcePosts: Post[] = allPosts
    ) => {
      let filtered = [...sourcePosts];
      
      // Filter by content (title or description)
      if (content) {
        filtered = filtered.filter((post) => 
          post.title.toLowerCase().includes(content.toLowerCase()) ||
          post.description.toLowerCase().includes(content.toLowerCase()) ||
          post.content.toLowerCase().includes(content.toLowerCase())
        );
      }
      
      // Filter by tag
      if (tag) {
        filtered = filtered.filter((post) => 
          post.tags.toLowerCase().includes(tag.toLowerCase())
        );
      }
      
      // Filter by date
      if (date) {
        if (date === "01012022") {
          const year = 2022;
          filtered = filtered.filter(post => {
            const postDate = new Date(post.date);
            return postDate.getFullYear() >= year;
          });
        } else if (date.includes('/')) {
          const parts = date.split('/');
          if (parts.length === 3 && parts[0] && parts[1] && parts[2]) {
            const day = parseInt(parts[0], 10);
            const month = parseInt(parts[1], 10) - 1; 
            const year = parseInt(parts[2], 10);
            
            const filterDate = new Date(year, month, day);
            filtered = filtered.filter(post => {
              const postDate = new Date(post.date);
              return postDate.getDate() === filterDate.getDate() &&
                    postDate.getMonth() === filterDate.getMonth() &&
                    postDate.getFullYear() === filterDate.getFullYear();
            });
          }
        }
      }
      
      // Filter by visibility
      if (visibility !== 'all') {
        filtered = filtered.filter((post) => 
          visibility === 'active' ? post.active : !post.active
        );
      }
      
      // Apply sorting
      filtered.sort((a, b) => {
        switch (sort) {
          case 'date-asc':
            return new Date(a.date).getTime() - new Date(b.date).getTime();
          case 'date-desc':
            return new Date(b.date).getTime() - new Date(a.date).getTime();
          case 'title-asc':
            return a.title.localeCompare(b.title);
          case 'title-desc':
            return b.title.localeCompare(a.title);
          case 'views-asc':
            return a.views - b.views;
          case 'views-desc':
            return b.views - a.views;
          default:
            return 0;
        }
      });
      
      setFilteredPosts(filtered);
    },
    [allPosts]
  );
  
  // Function to refresh data by syncing with the database
  const refreshPosts = async () => {
    setIsRefreshing(true);
    setRefreshMessage("Syncing with database...");
    
    try {
      // Call the sync API
      const response = await fetch('/api/sync');
      
      if (!response.ok) {
        throw new Error(`Failed to sync: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Show stats in the message
      setRefreshMessage(
        `Sync complete: ${data.stats.postsUpdated} updated, ${data.stats.postsAdded} added.`
      );
      
      // Reload posts from the server
      const updatedPosts = [...posts];
      
      // If we have window.posts, use those as they might be more up-to-date
      const postsToUse = window.posts && window.posts.length > 0 ? window.posts : updatedPosts;
      
      setAllPosts([...postsToUse]);
      
      // Re-apply current filters
      applyFilters(
        contentFilter, 
        tagFilter,
        dateFilter,
        visibilityFilter,
        sortBy,
        postsToUse
      );
      
      // Clear message after a delay
      setTimeout(() => {
        setRefreshMessage("");
      }, 5000);
    } catch (error) {
      console.error("Error refreshing posts:", error);
      setRefreshMessage(`Error: ${error instanceof Error ? error.message : 'Failed to refresh'}`);
      
      // Clear error message after a delay
      setTimeout(() => {
        setRefreshMessage("");
      }, 5000);
    } finally {
      setIsRefreshing(false);
    }
  };
  
  // Function to fetch posts from the API
  const fetchPosts = useCallback(async () => {
    try {
      // First, try to fetch all posts from the API to get the most up-to-date data
      try {
        const response = await fetch('/api/posts');
        if (response.ok) {
          const data = await response.json();
          if (Array.isArray(data.posts) && data.posts.length > 0) {
            setAllPosts(data.posts);
            return; // Exit early if we successfully got posts from API
          }
        }
      } catch (apiError) {
        console.error('Error fetching posts from API:', apiError);
        // Continue with fallback methods if API fetch fails
      }
      
      // Fallback: Load from the imported posts data source
      const allCurrentPosts = [...posts];
      
      // Check if we have the latest post from editing
      if (window.latestPost) {
        // Find the post in our current posts array and update it
        const index = allCurrentPosts.findIndex(p => p.id === window.latestPost!.id);
        if (index !== -1) {
          allCurrentPosts[index] = window.latestPost;
        } else {
          // Add the new post if it doesn't exist
          allCurrentPosts.push(window.latestPost);
        }
        // Clear the latestPost to prevent applying the same change multiple times
        window.latestPost = undefined;
      }
      
      // Also sync with window.posts if available (this contains all posts including the most recently edited one)
      if (window.posts && window.posts.length > 0) {
        // Use window.posts as the source of truth if available
        setAllPosts([...window.posts]);
      } else {
        // Otherwise use the allCurrentPosts we built
        setAllPosts(allCurrentPosts);
      }
    } catch (error) {
      console.error('Error fetching posts:', error);
    }
  }, []);
  
  // Add an effect to call fetchPosts when component mounts and when returning to the page
  useEffect(() => {
    // Call fetchPosts immediately when component mounts
    fetchPosts();
    
    // Add listener for page visibility changes to refresh data when coming back to the page
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        fetchPosts();
      }
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // Also fetch posts when window gets focus, which happens when returning from edit page
    window.addEventListener('focus', fetchPosts);
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('focus', fetchPosts);
    };
  }, [fetchPosts]);
  
  // Filter and sort posts whenever filter criteria or allPosts change
  useEffect(() => {
    let result = [...allPosts];
    
    // Filter by content
    if (contentFilter) {
      const lowerContent = contentFilter.toLowerCase();
      result = result.filter(
        post => 
          post.title.toLowerCase().includes(lowerContent) || 
          post.content.toLowerCase().includes(lowerContent) ||
          post.description.toLowerCase().includes(lowerContent)
      );
    }
    
    // Filter by tag
    if (tagFilter) {
      const lowerTag = tagFilter.toLowerCase();
      result = result.filter(
        post => post.tags.toLowerCase().includes(lowerTag)
      );
    }
    
    // Filter by date
    if (dateFilter) {
      let filterDate: Date;
      
      if (dateFilter === "01012022") {
        const year = 2022;
        
        result = result.filter(post => {
          const postDate = new Date(post.date);
          return postDate.getFullYear() >= year;
        });
      } else if (dateFilter.includes('/')) {
        
        const parts = dateFilter.split('/');
        if (parts.length === 3 && parts[0] && parts[1] && parts[2]) {
          const day = parseInt(parts[0], 10);
          const month = parseInt(parts[1], 10) - 1; 
          const year = parseInt(parts[2], 10);
          
          filterDate = new Date(year, month, day);
          
          // Make sure we have a valid date
          if (!isNaN(filterDate.getTime())) {
            
            filterDate.setHours(0, 0, 0, 0);
            
            result = result.filter(post => {
              const postDate = new Date(post.date);
              
              postDate.setHours(0, 0, 0, 0);
              
              // Show posts from the specified date and year or later
              return postDate.getFullYear() >= filterDate.getFullYear();
            });
          }
        }
      } else if (dateFilter.match(/^\d{8}$/)) {
        
        const day = parseInt(dateFilter.substring(0, 2), 10);
        const month = parseInt(dateFilter.substring(2, 4), 10) - 1; 
        const year = parseInt(dateFilter.substring(4), 10);
        
        // Apply filter for year
        result = result.filter(post => {
          const postDate = new Date(post.date);
          return postDate.getFullYear() >= year;
        });
      } else {
        // Standard date input format or other input
        filterDate = new Date(dateFilter);
        
        // Make sure we have a valid date
        if (!isNaN(filterDate.getTime())) {
          result = result.filter(post => {
            const postDate = new Date(post.date);
            return postDate.getFullYear() >= filterDate.getFullYear();
          });
        }
      }
    }
    
    // Filter by visibility
    if (visibilityFilter !== "all") {
      const isActive = visibilityFilter === "active";
      result = result.filter(post => post.active === isActive);
    }
    
    // Apply sorting
    result = sortPosts(result, sortBy);
    
    setFilteredPosts(result);
  }, [contentFilter, tagFilter, dateFilter, visibilityFilter, sortBy, allPosts]);

  // Sort posts based on selected option
  const sortPosts = (posts: Post[], sortOption: string) => {
    const sorted = [...posts];
    
    switch(sortOption) {
      case "title-asc":
        return sorted.sort((a, b) => a.title.localeCompare(b.title));
      case "title-desc":
        return sorted.sort((a, b) => b.title.localeCompare(a.title));
      case "date-asc":
        return sorted.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
      case "date-desc":
        return sorted.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
      default:
        return sorted;
    }
  };

  // Format date for display
  const formatDate = (date: string | Date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: 'numeric' 
    });
  };

  // Format tags for display - Ensure exact format expected by tests (#Tag1, #Tag2)
  const formatTags = (tags: string) => {
    return tags.split(',')
      .map(tag => `#${tag.trim()}`)
      .join(', ');
  };
  
  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setDateFilter(value);
  };
  
  // Handle status button click to display a message about the post status
  const handleStatusButtonClick = (post: Post) => {
    const message = post.active
      ? "This post is currently active and visible to users on the blog."
      : "This post is currently inactive and not visible to users on the blog.";
    
    setStatusMessage({ id: post.id, message });
    
    // Clear the message after 3 seconds
    setTimeout(() => {
      setStatusMessage(null);
    }, 3000);
  };
  
  useEffect(() => {
    console.log(`Displaying ${filteredPosts.length} posts out of ${posts.length} total posts`);
  }, [filteredPosts]);

  return (
    <main className="container mx-auto px-4 py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Admin of Full Stack Blog</h1>
        <div className="flex gap-4">
          <Link href="/posts/create" className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
            Create Post
          </Link>
          <form action="/api/auth" method="POST">
            <input type="hidden" name="_method" value="DELETE" />
            <button
              type="submit"
              className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Logout
            </button>
          </form>
        </div>
      </div>
      
      {/* Filter and Sort Controls */}
      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          <div>
            <label htmlFor="content-filter" className="block text-sm font-medium mb-1">
              Filter by Content:
            </label>
            <input
              id="content-filter"
              type="text"
              value={contentFilter}
              onChange={(e) => setContentFilter(e.target.value)}
              className="w-full p-2 border rounded"
            />
          </div>
          
          <div>
            <label htmlFor="tag-filter" className="block text-sm font-medium mb-1">
              Filter by Tag:
            </label>
            <input
              id="tag-filter"
              type="text"
              value={tagFilter}
              onChange={(e) => setTagFilter(e.target.value)}
              className="w-full p-2 border rounded"
            />
          </div>
          
          <div>
            <label htmlFor="date-filter" className="block text-sm font-medium mb-1">
              Filter by Date Created:
            </label>
            <input
              id="date-filter"
              type="text"
              inputMode="numeric"
              placeholder="DD/MM/YYYY"
              value={dateFilter}
              onChange={handleDateChange}
              className="w-full p-2 border rounded"
            />
          </div>
          
          <div>
            <label htmlFor="visibility-filter" className="block text-sm font-medium mb-1">
              Filter by Visibility:
            </label>
            <select
              id="visibility-filter"
              value={visibilityFilter}
              onChange={(e) => setVisibilityFilter(e.target.value)}
              className="w-full p-2 border rounded"
            >
              <option value="all">All</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
        </div>
        
        <div className="flex justify-end">
          <div className="w-48">
            <label htmlFor="sort-by" className="block text-sm font-medium mb-1">
              Sort By:
            </label>
            <select
              id="sort-by"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="w-full p-2 border rounded"
            >
              <option value="title-asc">Title (A-Z)</option>
              <option value="title-desc">Title (Z-A)</option>
              <option value="date-asc">Date (Oldest)</option>
              <option value="date-desc">Date (Newest)</option>
            </select>
          </div>
        </div>
      </div>
      
      {/* Refresh Button */}
      <div className="mb-6">
        <button
          onClick={refreshPosts}
          className={`px-4 py-2 rounded text-white ${isRefreshing ? "bg-gray-500" : "bg-blue-600 hover:bg-blue-700"}`}
          disabled={isRefreshing}
        >
          {isRefreshing ? "Refreshing..." : "Refresh Posts"}
        </button>
        
        {/* Refresh status message */}
        {refreshMessage && (
          <div className="mt-2 p-2 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded text-sm">
            {refreshMessage}
          </div>
        )}
      </div>
      
      {/* Post List */}
      <div className="space-y-6">
        {filteredPosts.length === 0 ? (
          <p className="text-center py-8">No posts found</p>
        ) : (
          filteredPosts.map((post) => (
            <article 
              key={post.id} 
              className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow flex flex-col md:flex-row gap-4"
              data-test-id={`blog-post-${post.id}`}
            >
              <div className="w-full md:w-1/3">
                <img
                  src={post.imageUrl}
                  alt={post.title}
                  className="w-full h-48 object-cover rounded"
                />
              </div>
              
              <div className="w-full md:w-2/3">
                <h2 className="text-xl font-bold mb-2">
                  <Link href={`/post/${post.urlId}`}>{post.title}</Link>
                </h2>
                
                <div className="flex flex-wrap gap-2 mb-2">
                  <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900 rounded text-sm">
                    {post.category}
                  </span>
                  <span className="text-sm text-gray-600 dark:text-gray-300">
                    {formatTags(post.tags)}
                  </span>
                </div>
                
                <p className="text-sm text-gray-500 dark:text-gray-400 mb-2">
                  Posted on {formatDate(post.date)}
                </p>
                
                <p className="mb-4">{post.description}</p>
                
                <div className="flex flex-col gap-2">
                  <div className="flex justify-between items-center">
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleStatusButtonClick(post)}
                        className={`px-3 py-1 rounded text-white ${
                          post.active ? "bg-green-500 hover:bg-green-600" : "bg-gray-500 hover:bg-gray-600"
                        }`}
                      >
                        {post.active ? "Active" : "Inactive"}
                      </button>
                    </div>
                    
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                      {post.views} views · {post.likes} likes
                    </div>
                  </div>
                  
                  {/* Status message display */}
                  {statusMessage && statusMessage.id === post.id && (
                    <div className="mt-2 p-2 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded text-sm">
                      {statusMessage.message}
                    </div>
                  )}
                </div>
              </div>
            </article>
          ))
        )}
      </div>
    </main>
  );
}
